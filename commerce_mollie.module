<?php
/**
 * @file
 * Drupal Commerce Module: Mollie Payment
 *
 * Implements Mollie payment services for use with Drupal Commerce.
 * Accept iDEAL, Mister Cash, Creditcard, bank transfer, PayPal, and
 * paysafecard online payments without fixed monthly costs or any punishing
 * registration procedures.
 *
 * @author: Geoffrey de Vlugt <geoffrey@renaissance.nl>
 */

require "Mollie/API/Autoloader.php";

/**
 * Implements hook_menu().
 */
function commerce_mollie_menu() {
  $items = array();

  $items['commerce_mollie/webhook'] = array(
    'page callback' => 'commerce_mollie_webhook',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['commerce_mollie/return/%/%'] = array(
    'title' => 'Commerce Mollie Payment',
    'page callback' => 'commerce_mollie_return',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function commerce_mollie_init() {
  if (strtolower(commerce_default_currency()) != 'eur') {
    drupal_set_message(t('The Commerce Mollie payment module only supports the Euro as the default currency'), 'error');
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_mollie_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_mollie'] = array(
    'title' => t('Mollie'),
    'description' => t('Integrates Mollie payment services support.'),
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_settings_form().
 */
function commerce_mollie_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
      'commerce_mollie_api_key_live' => '',
      'commerce_mollie_api_key_test' => '',
      'commerce_mollie_test_mode' => 0,
    );

  $form['commerce_mollie_api_key_live'] = array(
    '#type' => 'textfield',
    '#title' => t('Mollie live API key'),
    '#description' => t('Your Mollie live API key.'),
    '#default_value' => $settings['commerce_mollie_api_key_live'],
    '#required' => TRUE,
    '#element_validate' => array('_commerce_mollie_api_key_element_validate'),
  );

  $form['commerce_mollie_api_key_test'] = array(
    '#type' => 'textfield',
    '#title' => t('Mollie test API key'),
    '#description' => t('Your Mollie test API key.'),
    '#default_value' => $settings['commerce_mollie_api_key_test'],
    '#required' => TRUE,
    '#element_validate' => array('_commerce_mollie_api_key_element_validate'),
  );

  $form['commerce_mollie_test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable test mode'),
    '#description' => t('Check this option to enable test mode.'),
    '#default_value' => $settings['commerce_mollie_test_mode'],
  );

  return $form;
}

/**
 * Implements hook_commerce_redirect_form().
 *
 * Returns the form that is submitted to Mollie.
 */
function commerce_mollie_redirect_form($form, &$form_state, $order, $payment_method) {
  // Get amount (in cents) and the currency code.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();
  $currency_code = $wrapper->commerce_order_total->currency_code->value();

  // Order description which will be submitted to Mollie.
  $payment_description = t("Order @order_id - @site_name", array(
    '@order_id' => $order->order_number,
    '@site_name' => variable_get('site_name', '')
  ));

  // Create a new payment transaction for this order  and set the status to pending.
  $transaction = commerce_payment_transaction_new('commerce_mollie', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  // Save payment transaction (needed because we send the transaction ID to Mollie as metadata.
  commerce_payment_transaction_save($transaction);

  // The url of the page the customer should be returned back to by Mollie.
  $redirect_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  // The webhook url Mollie should callback to update the transaction status.
  $webhook_url = url('commerce_mollie/webhook', array('absolute' => TRUE));

  try {
    $mollie = new Mollie_API_Client;
    $mollie->setApiKey($payment_method['settings']['commerce_mollie_test_mode'] ? $payment_method['settings']['commerce_mollie_api_key_test'] : $payment_method['settings']['commerce_mollie_api_key_live']);

    $payment = $mollie->payments->create(array(
      "amount" => commerce_currency_amount_to_decimal($amount, $currency_code),
      "description" => $payment_description,
      "redirectUrl" => $redirect_url,
      "webhookUrl" => $webhook_url,
      "metadata" => array(
        "order_id" => $order->order_id,
        "transaction_id" => $transaction->transaction_id,
        "currency_code" => $currency_code,
      ),
    ));

    // Store the Mollie payment ID.
    $transaction->remote_id = $payment->id;

    // Save payment transaction.
    commerce_payment_transaction_save($transaction);

    // Set redirect url.
    $form['#action'] = $payment->getPaymentUrl();

    $form['mollie_information'] = array(
      '#markup' => '<p class="commerce-mollie-info">' . t('Continue with checkout to complete payment via Mollie.') . '</p>',
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Pay via Mollie'),
    );
  }
  catch (Mollie_API_Exception $e) {
    watchdog('commerce_mollie', 'Could not create a Mollie payment. Error: %error', array('%error' => htmlspecialchars($e->getMessage())), WATCHDOG_ERROR);
    drupal_set_message(t('An error occured while preparing your Mollie payment. Please try again or contact the webmaster.'), 'error');
    drupal_goto('cart/checkout');
  }

  return $form;
}

/**
 * Handles the callback/webhook call from Mollie and set the payment status accordingly.
 */
function commerce_mollie_webhook() {
  $payment_method = _commerce_mollie_get_payment_method_instance();

  try {
    $mollie = new Mollie_API_Client;
    $mollie->setApiKey($payment_method['settings']['commerce_mollie_test_mode'] ? $payment_method['settings']['commerce_mollie_api_key_test'] : $payment_method['settings']['commerce_mollie_api_key_live']);

    // Fetch the payment information made offsite from Mollie.
    $payment = $mollie->payments->get($_POST["id"]);

    // Load the previously stored Drupal Commerce payment transaction.
    $transaction = commerce_payment_transaction_load($payment->metadata->transaction_id);

    $order = commerce_order_load($payment->metadata->order_id);

    if ($payment->isPaid() == TRUE) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Successful Mollie payment with transaction ID: %transaction_id for order ID: %order_id', array(
        '%transaction_id' => $payment->metadata->transaction_id,
        '%order_id' => $payment->metadata->order_id,
      ));

      commerce_payment_redirect_pane_next_page($order);
    }
    else {
      if ($payment->isOpen() == FALSE) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t('Mollie payment with transaction ID: %transaction_id for order ID: %order_id failed', array(
          '%transaction_id' => $payment->metadata->transaction_id,
          '%order_id' => $payment->metadata->order_id,
        ));

        commerce_payment_redirect_pane_previous_page($order);
      }
    }

    watchdog('commerce_mollie', $transaction->message, array(), WATCHDOG_NOTICE);

    commerce_payment_transaction_save($transaction);
  }
  catch (Mollie_API_Exception $e) {
    watchdog('commerce_mollie', 'Could not load Mollie payment from webhook call. Error: %error', array('%error' => htmlspecialchars($e->getMessage())), WATCHDOG_ERROR);
  }
}

/**
 * Returns the Mollie payment method instance.
 *
 * @return object|bool
 *  The payment method object for Mollie or false if none was found.
 */
function _commerce_mollie_get_payment_method_instance() {
  $payment_method = FALSE;

  $event = rules_get_cache('event_commerce_payment_methods');

  // Look for a Rule enabling this payment method.
  foreach ($event->getIterator() as $rule) {
    foreach ($rule->actions() as $action) {
      if ($action->getElementName() == 'commerce_payment_enable_commerce_mollie') {
        $instance_id = commerce_payment_method_instance_id('commerce_mollie', $rule);
        $payment_method = commerce_payment_method_instance_load($instance_id);
      }
    }
  }

  return $payment_method;
}

/**
 * Validates the entered Mollie live and test API keys.
 *
 * @param $element
 *  The form element
 * @param $form_state
 *  The form state
 * @param $form
 *  The form
 */
function _commerce_mollie_api_key_element_validate($element, &$form_state, $form) {
  if ($element['#title'] == 'Mollie live API key' && strpos($element['#value'], 'live') !== 0) {
    form_error($element, t('Your Mollie live API key should start with <em>live</em>.'));
  }
  else {
    if ($element['#title'] == 'Mollie test API key' && strpos($element['#value'], 'test') !== 0) {
      form_error($element, t('Your Mollie test API key should start with <em>test</em>.'));
    }
  }
}