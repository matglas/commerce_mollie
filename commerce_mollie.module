<?php
/**
 * @file
 * Implements Mollie payment services for use with Drupal Commerce.
 * Accept iDEAL, Mister Cash, Creditcard, bank transfer, PayPal, and
 * paysafecard online payments without fixed monthly costs or any punishing
 * registration procedures.
 *
 * Geoffrey de Vlugt - Renaissance IT
 */

require "Mollie/API/Autoloader.php";

/**
 * Implements hook_menu().
 */
function commerce_mollie_menu() {
  $items = array();

  $items['commerce_mollie/report/%'] = array(
    'title' => 'Commerce Mollie Payment',
    'page callback' => 'commerce_mollie_report',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['commerce_mollie/return/%/%'] = array(
    'title' => 'Commerce Mollie Payment',
    'page callback' => 'commerce_mollie_return',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_mollie_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_mollie'] = array(
    'title' => t('Commerce Mollie'),
    'description' => t('Integrates Mollie payment services support.'),
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_settings_form().
 */
function commerce_mollie_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
      'commerce_mollie_api_key_live' => '',
      'commerce_mollie_api_key_test' => '',
      'commerce_mollie_test_mode' => 0,
    );

  $form['commerce_mollie_api_key_live'] = array(
    '#type' => 'textfield',
    '#title' => t('Mollie live API key'),
    '#description' => t('Your Mollie live API key.'),
    '#default_value' => $settings['commerce_mollie_api_key_live'],
    '#required' => TRUE,
  );

  $form['commerce_mollie_api_key_test'] = array(
    '#type' => 'textfield',
    '#title' => t('Mollie test API key'),
    '#description' => t('Your Mollie test API key.'),
    '#default_value' => $settings['commerce_mollie_api_key_test'],
    '#required' => TRUE,
  );

  $form['commerce_mollie_test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable test mode'),
    '#description' => t('Check this option to enable test mode.'),
    '#default_value' => $settings['commerce_mollie_test_mode'],
  );

  return $form;
}

/**
 * Implements hook_commerce_redirect_form().
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_mollie_redirect_form($form, &$form_state, $order, $payment_method) {
  // Get amount (in cents) and the currency code.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();
  $currency_code = $wrapper->commerce_order_total->currency_code->value();

  // Order description which will be submitted to Mollie.
  $payment_description = t("Order @order_id - @site_name", array(
    '@order_id' => $order->order_number,
    '@site_name' => variable_get('site_name', '')
  ));

  $transaction = commerce_payment_transaction_new('commerce_mollie', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  commerce_payment_transaction_save($transaction);

  // The url of the page the customer should be returned back to by Mollie.
  $redirect_url = url('commerce_mollie/return/' . $order->order_id . '/' . $transaction->transaction_id, array('absolute' => TRUE));

  try {
    $mollie = new Mollie_API_Client;
    $mollie->setApiKey($payment_method['settings']['commerce_mollie_test_mode'] ? $payment_method['settings']['commerce_mollie_api_key_test'] : $payment_method['settings']['commerce_mollie_api_key_live']);

    $payment = $mollie->payments->create(array(
      "amount" => $amount / 100.00,
      "description" => $payment_description,
      "redirectUrl" => $redirect_url,
      "metadata" => array(
        "order_id" => $order->order_id,
        "transaction_id" => $transaction->transaction_id,
        "currency_code" => $currency_code,
      ),
    ));

    $form['#action'] = $payment->getPaymentUrl();

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Proceed to Mollie'),
    );

    // header("Location: " . $payment->getPaymentUrl());
  }
  catch (Mollie_API_Exception $e) {
    watchdog('commerce_mollie', 'Could not create a Mollie payment. Error: %error', array('%error' => htmlspecialchars($e->getMessage())), WATCHDOG_ERROR);
    drupal_set_message(t('An error occured while preparing your Mollie payment. Please try again or contact the webmaster.'), 'error');
    drupal_goto('cart/checkout');
  }

  return $form;
}

function commerce_mollie_return($order_id, $transaction_id) {
  $transaction = commerce_payment_transaction_load($transaction_id);

  if ($transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    drupal_goto('checkout/' . $order_id . '/complete');
  }
  else {
    watchdog('commerce_mollie', 'The payment was cancelled or something went wrong.', array(), WATCHDOG_WARNING);
    drupal_set_message(t('The payment was cancelled or something went wrong.'), 'error');
    drupal_goto('checkout/' . $order_id);
  }
}

